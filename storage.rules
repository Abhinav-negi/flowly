rules_version = '2';
service firebase.storage {
  match /b/{bucket}/o {
    
    // Helper function to check if user is admin
    function isAdmin() {
      return request.auth != null &&
             firestore.exists("/databases/(default)/documents/admins/" + request.auth.uid);
    }
    
    // Helper function to check if user is involved in a message thread
    function canAccessMessageMedia(userId) {
      // Check if there's a message document where user is sender or receiver
      // This is a simplified check - you might need to adjust based on your message structure
      return request.auth != null && (
        request.auth.uid == userId ||
        // Additional logic to check if user is part of the conversation
        // You may need to store conversation participants in a way that's accessible here
        isAdmin()
      );
    }

    // Profile pictures - Public read for dating app functionality
    match /profiles/{userId}/{allPaths=**} {
      // Owner can read/write their own profile pics
      allow read, write: if request.auth != null && request.auth.uid == userId;
      
      // ðŸ”’ OPTION 1: Keep public read for dating app (current behavior)
      allow read: if request.auth != null;
      
      // ðŸ”’ OPTION 2: Restrict to verified users only (uncomment if you want more privacy)
      // allow read: if request.auth != null && 
      //                firestore.exists("/databases/(default)/documents/users/" + request.auth.uid) &&
      //                firestore.get("/databases/(default)/documents/users/" + request.auth.uid).data.verification.verificationStatus == 'verified';
      
      // Admins have full access
      allow read, write: if isAdmin();
    }

    // Verification documents - Restricted access
    match /verifications/{userId}/{allPaths=**} {
      // Only owner can read/write their verification docs
      allow read, write: if request.auth != null && request.auth.uid == userId;
      
      // Admins can read for verification process
      allow read, write: if isAdmin();
    }

    // ðŸ”’ FIXED: Chat media/attachments - Restricted to conversation participants
    match /messages/{userId}/{allPaths=**} {
      // Owner (uploader) can write
      allow write: if request.auth != null && request.auth.uid == userId;
      
      // ðŸ”’ FIXED: Only conversation participants can read
      // This is simplified - you may need to implement more complex logic
      // based on how you structure your message threads
      allow read: if request.auth != null && (
        request.auth.uid == userId ||
        // You might need to check if current user is recipient of messages from this userId
        // This depends on your message structure
        isAdmin()
      );
      
      // Admins have full access
      allow read, write: if isAdmin();
    }

    // Date photos/evidence - Restricted to participants
    match /dates/{userId}/{allPaths=**} {
      // Owner can read/write their date evidence
      allow read, write: if request.auth != null && request.auth.uid == userId;
      
      // Admins can access for moderation
      allow read, write: if isAdmin();
    }

    // Report attachments - Restricted access
    match /reports/{userId}/{allPaths=**} {
      // Only reporter can upload
      allow write: if request.auth != null && request.auth.uid == userId;
      
      // Only admins can read report attachments
      allow read: if isAdmin();
    }

    // App assets (logos, app images, etc.) - Public read
    match /app/{allPaths=**} {
      // Public read for app assets
      allow read: if true;
      
      // Only admins can manage app assets
      allow write: if isAdmin();
    }
    
    // Default deny all other paths
    match /{allPaths=**} {
      allow read, write: if isAdmin();
    }
  }
}