rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to check if user is admin
    function isAdmin() {
      return request.auth != null && 
             exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }
    
    // Helper function to check if user is verified
    function isVerified(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data.verification.verificationStatus == 'verified';
    }
    
    // Helper function to check if both users are involved in the match
    function isInvolved(matchData) {
      return request.auth.uid == matchData.user1Id || request.auth.uid == matchData.user2Id;
    }

    // Admin collection - only admins can manage
    match /admins/{adminId} {
      allow read, write: if request.auth != null && request.auth.uid == adminId;
      allow read: if isAdmin();
    }

    // Users collection
    match /users/{userId} {
      // Users can read/write their own profile
      allow read, write: if request.auth != null && request.auth.uid == userId;
      
      // Admins can read all users for dashboard
      allow read: if isAdmin();
      
      // Admins can write to update verification status, queue status, etc.
      allow write: if isAdmin() && 
                     request.resource.data.diff(resource.data).affectedKeys()
                     .hasOnly(['verification', 'inQueue', 'queueTimer', 'matchedUsers', 'likesSent', 'likesReceived']);
      
      // Verified users can read basic info of other verified users (for matching)
      allow read: if request.auth != null && 
                     isVerified(request.auth.uid) && 
                     isVerified(userId) &&
                     request.query.limit <= 50;

      // Notifications subcollection
      match /notifications/{notificationId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
        allow write: if isAdmin(); // Admins can send notifications
      }
    }

    // Matches collection
    match /matches/{matchId} {
      allow read: if request.auth != null && isInvolved(resource.data);
      allow read, write: if isAdmin();
      allow create: if isAdmin();
      allow update: if request.auth != null && 
                       isInvolved(resource.data) &&
                       request.resource.data.diff(resource.data).affectedKeys()
                       .hasOnly(['user1Accepted', 'user2Accepted', 'status']);
    }

    // Date cards collection
    match /dates/{dateId} {
      allow read, write: if request.auth != null && 
                           (resource.data.user1Id == request.auth.uid || 
                            resource.data.user2Id == request.auth.uid);
      allow read: if isAdmin();
      allow create: if isAdmin();
    }

    // Messages collection
    match /messages/{messageId} {
      allow read: if request.auth != null && 
                     (resource.data.fromUid == request.auth.uid || 
                      resource.data.toUid == request.auth.uid);
      allow create: if request.auth != null && 
                       request.resource.data.fromUid == request.auth.uid &&
                       isVerified(request.auth.uid);
      allow update: if request.auth != null && 
                       resource.data.toUid == request.auth.uid &&
                       request.resource.data.diff(resource.data).affectedKeys()
                       .hasOnly(['read']);
      allow read: if isAdmin();
    }

    // Reports collection
    match /reports/{reportId} {
      allow create: if request.auth != null && 
                       request.resource.data.reporterId == request.auth.uid;
      allow read: if request.auth != null && 
                     resource.data.reporterId == request.auth.uid;
      allow read, write: if isAdmin();
    }

    // Analytics collection
    match /analytics/{document} {
      allow read, write: if isAdmin();
    }

    // App settings
    match /settings/{setting} {
      allow read: if request.auth != null;
      allow write: if isAdmin();
    }

    // Verifications collection
    match /verifications/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
      allow read: if isAdmin();
      allow update: if isAdmin() &&
                       request.resource.data.diff(resource.data).affectedKeys()
                       .hasOnly(['status', 'reviewedAt', 'reviewerId', 'rejectionReason']);
    }

    // Queue management collection
    match /queue/{userId} {
      allow read: if request.auth != null && request.auth.uid == userId;
      allow update: if request.auth != null && 
                       request.auth.uid == userId &&
                       request.resource.data.diff(resource.data).affectedKeys()
                       .hasOnly(['active', 'preferences']);
      allow read, write: if isAdmin();
    }
  }
}
