rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // âœ… Helper: check if user is admin
    function isAdmin() {
      return request.auth != null && (
        request.auth.token.admin == true ||
        exists(/databases/$(database)/documents/admins/$(request.auth.uid))
      );
    }

    // âœ… Helper: check verified flag in user data
    function isUserVerified(userData) {
      return userData.verification != null &&
             userData.verification.verificationStatus == 'verified';
    }

    // âœ… Helper: check if current user is verified
    function isCurrentUserVerified() {
      return request.auth != null &&
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             isUserVerified(get(/databases/$(database)/documents/users/$(request.auth.uid)).data);
    }

    // âœ… Helper: check ownership
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }

    // âœ… Helper: check if user is part of a match/date
    function isUserInArray(users) {
      return request.auth != null && request.auth.uid in users;
    }

    // ðŸ”’ Admins collection
    match /admins/{adminId} {
      allow read: if request.auth != null;
      allow write, delete: if isAdmin() && request.auth.uid != adminId;
    }

    // ðŸ”’ Users collection - SIMPLIFIED
    match /users/{userId} {
      // Owner can fully manage own profile
      allow read, write: if isOwner(userId);

      // Admin full access
      allow read, write: if isAdmin();

      // Verified users can read other verified users (for profile viewing)
      allow read: if isCurrentUserVerified() &&
                  resource != null &&
                  isUserVerified(resource.data);

      // Subcollection: notifications
      match /notifications/{notificationId} {
        allow read, write: if isOwner(userId);
        allow write: if isAdmin();
      }
    }

    // ðŸ”’ NEW: Matches collection
    match /matches/{matchId} {
      // Users can read their own matches
      allow read: if request.auth != null &&
                   resource != null &&
                   isUserInArray(resource.data.users);

      // Only admins can create/delete matches
      allow create, delete: if isAdmin();
      
      // Users can update match status (like blocking)
      allow update: if request.auth != null &&
                    resource != null &&
                    isUserInArray(resource.data.users) &&
                    request.resource.data.diff(resource.data).affectedKeys()
                    .hasOnly(['status', 'updatedAt']);

      // Admin full access
      allow read, write, create, delete: if isAdmin();
    }

    // ðŸ”’ FIXED: Date Cards collection - MAIN SOLUTION
    match /dateCards/{dateCardId} {
      // Users can read date cards they're part of
      allow read: if request.auth != null &&
                   resource != null &&
                   isUserInArray(resource.data.users);

      // Only admins can create date cards
      allow create: if isAdmin();

      // FIXED: Users can update their response in the date card
      allow update: if request.auth != null &&
                    resource != null &&
                    isUserInArray(resource.data.users) &&
                    // Allow updating these fields for users in the date
                    request.resource.data.diff(resource.data).affectedKeys()
                    .hasAny(['responses', 'status', 'confirmedAt', 'cancelledAt', 'appealRequest', 'updatedAt']);

      // Admin full access
      allow read, write, create, delete: if isAdmin();
    }

    // ðŸ”’ Messages collection
    match /messages/{messageId} {
      allow read: if request.auth != null &&
                   resource != null &&
                   (resource.data.fromUid == request.auth.uid ||
                    resource.data.toUid == request.auth.uid);

      allow create: if request.auth != null &&
                    request.resource.data.fromUid == request.auth.uid;

      allow update: if request.auth != null &&
                    resource != null &&
                    resource.data.toUid == request.auth.uid &&
                    request.resource.data.diff(resource.data).affectedKeys()
                    .hasOnly(['read']);

      allow read, write, create, delete: if isAdmin();
    }

    // ðŸ”’ Reports collection
    match /reports/{reportId} {
      allow create: if request.auth != null &&
                    request.resource.data.reporterId == request.auth.uid;

      allow read: if request.auth != null &&
                   resource != null &&
                   resource.data.reporterId == request.auth.uid;

      allow read, write, create, delete: if isAdmin();
    }

    // ðŸ”’ Analytics collection
    match /analytics/{docId} {
      allow read, write, create, delete: if isAdmin();
    }

    // ðŸ”’ App settings
    match /settings/{settingId} {
      allow read: if request.auth != null;
      allow write, create, delete: if isAdmin();
    }

    // ðŸ”’ Verifications collection
    match /verifications/{userId} {
      allow read, write: if isOwner(userId);
      allow read, write, create, delete: if isAdmin();
    }

    // ðŸ”’ Queue collection
    match /queue/{userId} {
      allow read: if isOwner(userId);
      allow update: if isOwner(userId) &&
                    request.resource.data.diff(resource.data).affectedKeys()
                    .hasOnly(['active', 'preferences']);
      allow read, write, create, delete: if isAdmin();
    }

    // ðŸ”’ Block dangerous collections
    match /adminRequests/{requestId} {
      allow read, write, create, delete: if false;
    }
    match /userRoles/{userId} {
      allow read, write, create, delete: if false;
    }

    // âœ… Catch-all admin override
    match /{document=**} {
      allow read, write: if isAdmin();
    }
  }
}