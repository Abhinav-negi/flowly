rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper: check if user is admin
    function isAdmin() {
      return request.auth != null && (
        request.auth.token.admin == true ||
        exists(/databases/$(database)/documents/admins/$(request.auth.uid))
      );
    }
    
    // Helper: check if user document shows verified status
    function isUserVerified(userData) {
      return userData.verification != null && 
             userData.verification.verificationStatus == 'verified';
    }
    
    // Helper: check if current user is verified
    function isCurrentUserVerified() {
      return request.auth != null && 
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             isUserVerified(get(/databases/$(database)/documents/users/$(request.auth.uid)).data);
    }
    
    // Helper: check if user owns the document
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }

    // üîí Admins collection
    match /admins/{adminId} {
      allow read: if request.auth != null;
      allow write, create, delete: if isAdmin();
    }

    // üë§ Users collection
    match /users/{userId} {
      // Users can fully manage their own profile
      allow read, write: if isOwner(userId);

      // Admins can manage all users
      allow read, write: if isAdmin();

      // Verified users can see other verified users
      allow read: if isCurrentUserVerified() &&
                   resource != null &&
                   isUserVerified(resource.data);

      // ‚úÖ Option 1 fix: allow match participants to update dateCards
      allow update: if request.auth != null &&
        resource != null &&
        (
          request.auth.uid == userId || // owner
          // OR if this user is listed as matchUid inside one of the dateCards
          resource.data.dateCards.where(card, card.matchUid == request.auth.uid).size() > 0
        );

      // Notifications subcollection
      match /notifications/{notificationId} {
        allow read, write: if isOwner(userId);
        allow write: if isAdmin();
      }
    }

    // ü§ù Matches collection
    match /matches/{matchId} {
      allow read: if request.auth != null && 
        resource != null &&
        (resource.data.users[0] == request.auth.uid || 
         resource.data.users[1] == request.auth.uid);
      
      allow read, write, create, delete: if isAdmin();
      
      // Users can only update acceptance fields
      allow update: if request.auth != null && 
        resource != null &&
        (resource.data.users[0] == request.auth.uid || 
         resource.data.users[1] == request.auth.uid) &&
        request.resource.data.diff(resource.data).affectedKeys()
        .hasOnly(['user1Accepted', 'user2Accepted', 'status']);
    }

    // üìÖ Date cards collection
    match /dates/{dateId} {
      allow read, write: if request.auth != null && 
        resource != null &&
        (resource.data.users[0] == request.auth.uid || 
         resource.data.users[1] == request.auth.uid);
      
      allow read, write, create, delete: if isAdmin();
    }

    // üí¨ Messages collection
    match /messages/{messageId} {
      allow read: if request.auth != null && 
        resource != null &&
        (resource.data.fromUid == request.auth.uid || 
         resource.data.toUid == request.auth.uid);
      
      allow create: if request.auth != null && 
        request.resource.data.fromUid == request.auth.uid;
      
      allow update: if request.auth != null && 
        resource != null &&
        resource.data.toUid == request.auth.uid &&
        request.resource.data.diff(resource.data).affectedKeys()
        .hasOnly(['read']);
      
      allow read, write, create, delete: if isAdmin();
    }

    // üö® Reports collection
    match /reports/{reportId} {
      allow create: if request.auth != null && 
        request.resource.data.reporterId == request.auth.uid;
      
      allow read: if request.auth != null && 
        resource != null &&
        resource.data.reporterId == request.auth.uid;
      
      allow read, write, create, delete: if isAdmin();
    }

    // üìä Analytics collection
    match /analytics/{docId} {
      allow read, write, create, delete: if isAdmin();
    }

    // ‚öôÔ∏è Settings
    match /settings/{settingId} {
      allow read: if request.auth != null;
      allow write, create, delete: if isAdmin();
    }

    // ‚úÖ Verifications
    match /verifications/{userId} {
      allow read, write: if isOwner(userId);
      allow read, write, create, delete: if isAdmin();
    }

    // ‚è≥ Queue management
    match /queue/{userId} {
      allow read: if isOwner(userId);
      
      allow update: if isOwner(userId) &&
        request.resource.data.diff(resource.data).affectedKeys()
        .hasOnly(['active', 'preferences']);
      
      allow read, write, create, delete: if isAdmin();
    }

    // üõ°Ô∏è Catch-all admin override
    match /{document=**} {
      allow read, write: if isAdmin();
    }
  }
}
