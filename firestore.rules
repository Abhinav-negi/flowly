rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // --- ðŸ”§ HELPERS ---
    function isAdmin() {
      return request.auth != null && (
        request.auth.token.admin == true ||
        exists(/databases/$(database)/documents/admins/$(request.auth.uid))
      );
    }

    function isUserVerified(userData) {
      return userData.verification != null && 
             userData.verification.verificationStatus == 'verified';
    }

    function isCurrentUserVerified() {
      return request.auth != null && 
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             isUserVerified(get(/databases/$(database)/documents/users/$(request.auth.uid)).data);
    }

    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }

    // --- ADMINS COLLECTION ---
    match /admins/{adminId} {
      allow read: if request.auth != null;
      allow write, create, delete: if isAdmin();
    }

    // --- USERS COLLECTION ---
    match /users/{userId} {
      
      // --- READ ACCESS ---
      allow read: if isOwner(userId); // Always read own profile
      allow read: if isCurrentUserVerified() && resource != null && isUserVerified(resource.data); // Verified â†” Verified
      allow read: if isAdmin(); // Admins can read all

      // --- CREATE ---
      allow create: if isOwner(userId);

      // --- UPDATE ---
      allow update: if isOwner(userId) &&
        request.resource.data.diff(resource.data).affectedKeys()
        .hasOnly([
          'dateCards',
          'verification',
          'notifications',
          'messages',
          'updatedAt',
          'interests',
          'hobbies',
          'datingPreference',
          'workLifeStatus',
          'dietaryPreference',
          'bio',
          'photos'
        ]);

      // Admins can always write
      allow write: if isAdmin();

      // --- SUBCOLLECTION: NOTIFICATIONS ---
      match /notifications/{notificationId} {
        allow read, write: if isOwner(userId);
        allow write: if isAdmin();
      }
    }

    // --- MATCHES COLLECTION ---
    match /matches/{matchId} {
      allow read: if request.auth != null && resource != null &&
        (resource.data.users[0] == request.auth.uid || resource.data.users[1] == request.auth.uid);

      allow update: if request.auth != null && resource != null &&
        (resource.data.users[0] == request.auth.uid || resource.data.users[1] == request.auth.uid) &&
        request.resource.data.diff(resource.data).affectedKeys()
        .hasOnly(['user1Accepted', 'user2Accepted', 'status']);

      allow create: if request.auth != null &&
        (request.resource.data.users[0] == request.auth.uid || request.resource.data.users[1] == request.auth.uid);

      allow delete: if isAdmin();
      allow write: if isAdmin();
    }

    // --- DATE CARDS COLLECTION ---
    match /dates/{dateId} {
      allow read, write: if request.auth != null && resource != null &&
        (resource.data.users[0] == request.auth.uid || resource.data.users[1] == request.auth.uid);
      allow read, write, create, delete: if isAdmin();
    }

    // --- MESSAGES COLLECTION ---
    match /messages/{messageId} {
      allow read: if request.auth != null && resource != null &&
        (resource.data.fromUid == request.auth.uid || resource.data.toUid == request.auth.uid);

      allow create: if request.auth != null && request.resource.data.fromUid == request.auth.uid;

      allow update: if request.auth != null && resource != null &&
        resource.data.toUid == request.auth.uid &&
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['read']);

      allow read, write, create, delete: if isAdmin();
    }

    // --- REPORTS COLLECTION ---
    match /reports/{reportId} {
      allow create: if request.auth != null && request.resource.data.reporterId == request.auth.uid;
      allow read: if request.auth != null && resource != null && resource.data.reporterId == request.auth.uid;
      allow read, write, create, delete: if isAdmin();
    }

    // --- ANALYTICS COLLECTION ---
    match /analytics/{docId} {
      allow read, write, create, delete: if isAdmin();
    }

    // --- SETTINGS COLLECTION ---
    match /settings/{settingId} {
      allow read: if request.auth != null;
      allow write, create, delete: if isAdmin();
    }

    // --- VERIFICATIONS COLLECTION ---
    match /verifications/{userId} {
      allow read, write: if isOwner(userId);
      allow read, write, create, delete: if isAdmin();
    }

    // --- QUEUE COLLECTION ---
    match /queue/{userId} {
      allow read: if isOwner(userId);
      allow update: if isOwner(userId) &&
        request.resource.data.diff(resource.data).affectedKeys()
        .hasOnly(['active', 'preferences']);
      allow read, write, create, delete: if isAdmin();
    }

    // --- CATCH-ALL ADMIN ACCESS ---
    match /{document=**} {
      allow read, write: if isAdmin();
    }
  }
}
