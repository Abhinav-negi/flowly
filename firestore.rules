rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to check if user is admin using custom claims OR admins collection
    function isAdmin() {
      return request.auth != null && (
        request.auth.token.admin == true ||
        exists(/databases/$(database)/documents/admins/$(request.auth.uid))
      );
    }
    
    // Helper function to check if a user document shows verified status
    function isUserVerified(userData) {
      return userData.verification != null && 
             userData.verification.verificationStatus == 'verified';
    }
    
    // Helper function to check if current user is verified
    function isCurrentUserVerified() {
      return request.auth != null && 
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             isUserVerified(get(/databases/$(database)/documents/users/$(request.auth.uid)).data);
    }
    
    // Helper function to check if user owns the document
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }

    // ðŸ”’ FIXED: Admin collection - only existing admins can manage
    match /admins/{adminId} {
      // Users can read to check admin status, but CANNOT write
      allow read: if request.auth != null;
      // Only existing admins can add/remove admins
      allow write, create, delete: if isAdmin();
    }

    // Users collection
    match /users/{userId} {
      // Users can read/write their own profile
      allow read, write: if isOwner(userId);
      
      // Admins can read/write all users for dashboard
      allow read, write: if isAdmin();
      
      // ðŸ”’ FIXED: Only verified users can read other verified users' basic info
      allow read: if isCurrentUserVerified() && 
                     resource != null && 
                     isUserVerified(resource.data);

      // Notifications subcollection
      match /notifications/{notificationId} {
        allow read, write: if isOwner(userId);
        allow write: if isAdmin(); // Admins can send notifications
      }
    }

    // Matches collection
    match /matches/{matchId} {
      // Allow users to read matches they're involved in
      allow read: if request.auth != null && 
                     resource != null &&
                     (resource.data.users[0] == request.auth.uid || 
                      resource.data.users[1] == request.auth.uid);
      
      // Admins have full access to matches
      allow read, write, create, delete: if isAdmin();
      
      // Allow users to update their acceptance status
      allow update: if request.auth != null && 
                       resource != null &&
                       (resource.data.users[0] == request.auth.uid || 
                        resource.data.users[1] == request.auth.uid) &&
                       request.resource.data.diff(resource.data).affectedKeys()
                       .hasOnly(['user1Accepted', 'user2Accepted', 'status']);
    }

    // Date cards collection
    match /dates/{dateId} {
      // Users can read/write date cards they're involved in
      allow read, write: if request.auth != null && 
                           resource != null &&
                           (resource.data.users[0] == request.auth.uid || 
                            resource.data.users[1] == request.auth.uid);
      
      // Admins have full access
      allow read, write, create, delete: if isAdmin();
    }

    // Messages collection
    match /messages/{messageId} {
      // Users can read messages they sent or received
      allow read: if request.auth != null && 
                     resource != null &&
                     (resource.data.fromUid == request.auth.uid || 
                      resource.data.toUid == request.auth.uid);
      
      // Users can create messages they're sending
      allow create: if request.auth != null && 
                       request.resource.data.fromUid == request.auth.uid;
      
      // Users can mark messages as read
      allow update: if request.auth != null && 
                       resource != null &&
                       resource.data.toUid == request.auth.uid &&
                       request.resource.data.diff(resource.data).affectedKeys()
                       .hasOnly(['read']);
      
      // Admins can read all messages
      allow read, write, create, delete: if isAdmin();
    }

    // Reports collection
    match /reports/{reportId} {
      // Users can create reports
      allow create: if request.auth != null && 
                       request.resource.data.reporterId == request.auth.uid;
      
      // Users can read reports they created
      allow read: if request.auth != null && 
                     resource != null &&
                     resource.data.reporterId == request.auth.uid;
      
      // Admins have full access to reports
      allow read, write, create, delete: if isAdmin();
    }

    // Analytics collection
    match /analytics/{docId} {
      // Only admins can access analytics
      allow read, write, create, delete: if isAdmin();
    }

    // App settings
    match /settings/{settingId} {
      // All authenticated users can read settings
      allow read: if request.auth != null;
      
      // Only admins can modify settings
      allow write, create, delete: if isAdmin();
    }

    // Verifications collection
    match /verifications/{userId} {
      // Users can read/write their own verification data
      allow read, write: if isOwner(userId);
      
      // Admins have full access
      allow read, write, create, delete: if isAdmin();
    }

    // Queue management collection
    match /queue/{userId} {
      // Users can read their own queue status
      allow read: if isOwner(userId);
      
      // Users can update their queue preferences
      allow update: if isOwner(userId) &&
                       request.resource.data.diff(resource.data).affectedKeys()
                       .hasOnly(['active', 'preferences']);
      
      // Admins have full access to queue management
      allow read, write, create, delete: if isAdmin();
    }

    // âœ… Catch-all rule for admin access to ANY document
    match /{document=**} {
      allow read, write: if isAdmin();
    }
  }
}